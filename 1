

1. Linux Commands

ls
cd [directory_name]
pwd
mkdir [directory_name]
rm [file_name]
rmdir [directory_name]
cp [source] [destination]
mv [source] [destination]
touch [file_name]
cat [file_name]
less [file_name]
grep [pattern] [file_name]
chmod [permissions] [file_name]
chown [owner]:[group] [file_name]
sudo [command]
man [command]

2. Shell Scripts

echo "Hello, world!"
pwd
cd /path/to/directory

#!/bin/bash

# Print a message
echo "Welcome to my shell script!"

# Create a directory
mkdir test_directory

# Change directory
cd test_directory

# Create a few files
touch file1.txt
touch file2.txt

# List files in the directory
ls

# Move files to a new directory
mkdir new_location
mv file1.txt file2.txt new_location/

# List files in the new directory
ls new_location/

# Remove the test directory
cd ..
rm -r test_directory

3. Process creation using system call

#include <stdio.h>
#include <unistd.h>

int main() {
    pid_t pid; // Variable to store the process ID

    pid = fork(); // Create a new process

    if (pid < 0) { // Error occurred
        fprintf(stderr, "Fork failed\n");
        return 1;
    } else if (pid == 0) { // Child process
        printf("Child process is running\n");
        // Add code for child process here
    } else { // Parent process
        printf("Parent process is running\n");
        // Add code for parent process here
    }

    return 0;
}

Alternative

#include <stdio.h>
#include <stdlib.h>

int main() {
    // Execute ls command using system call
    system("ls -l");

    return 0;
}

4. WAP To implement FCFS Scheduling

#include <stdio.h>

// Function to calculate average waiting time
void findWaitingTime(int n, int bt[], int wt[]) {
    wt[0] = 0; // Waiting time for first process is 0

    // Calculate waiting time
    for (int i = 1; i < n; i++)
        wt[i] = wt[i - 1] + bt[i - 1];
}

// Function to calculate turnaround time
void findTurnAroundTime(int n, int bt[], int wt[], int tat[]) {
    // Calculate turnaround time
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}

// Function to calculate average time
void findAverageTime(int n, int bt[]) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    // Calculate waiting time
    findWaitingTime(n, bt, wt);

    // Calculate turnaround time
    findTurnAroundTime(n, bt, wt, tat);

    // Display processes along with all details
    printf("Processes  Burst Time  Waiting Time  Turn-Around Time\n");
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf("   %d\t\t%d\t\t%d\t\t%d\n", i + 1, bt[i], wt[i], tat[i]);
    }

    // Calculate average waiting time and turnaround time
    float avg_wt = (float)total_wt / n;
    float avg_tat = (float)total_tat / n;
    printf("\nAverage Waiting Time: %.2f\n", avg_wt);
    printf("Average Turn-Around Time: %.2f\n", avg_tat);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Processes
    int processes[n];

    // Burst time of all processes
    int burst_time[n];

    // Input burst times from the user
    printf("Enter the burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Burst time for process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
        processes[i] = i + 1;
    }

    // Function call to find average waiting time
    findAverageTime(n, burst_time);
    return 0;
}

5. WAP To implement SJF Scheduling

#include <stdio.h>
#include <stdlib.h>

// Process structure
typedef struct {
    int id;
    int burst_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
} Process;

// Function to sort processes by arrival time
void sort_by_arrival_time(Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                // Swap processes[j] and processes[j+1]
                Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}

// Function to sort processes by burst time (SJF)
void sort_by_burst_time(Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].burst_time > processes[j + 1].burst_time) {
                // Swap processes[j] and processes[j+1]
                Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}

// Function to calculate waiting and turnaround times
void calculate_times(Process processes[], int n) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    processes[0].waiting_time = 0;
    processes[0].turnaround_time = processes[0].burst_time;

    for (int i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }

    // Calculate total waiting and turnaround times
    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    // Print process details
    printf("Process\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time, processes[i].arrival_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    // Print average waiting and turnaround times
    printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process *processes = (Process *)malloc(n * sizeof(Process));

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].id = i + 1;
    }

    // Sort processes by arrival time
    sort_by_arrival_time(processes, n);

    // Schedule processes using SJF
    int current_time = 0;
    for (int i = 0; i < n; i++) {
        if (processes[i].arrival_time > current_time) {
            current_time = processes[i].arrival_time;
        }
        processes[i].waiting_time = current_time - processes[i].arrival_time;
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
        current_time += processes[i].burst_time;
    }

    // Calculate average waiting and turnaround times
    calculate_times(processes, n);

    free(processes);
    return 0;
}


6. Bounded Buffer Problem

#include <stdio.h>
#include <unistd.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int in = 0, out = 0;

void producer() {
    int item;
    for (int i = 0; i < BUFFER_SIZE; i++) {
        printf("Producer: Enter item %d: ", i+1);
        scanf("%d", &item);
        
        while (((in + 1) % BUFFER_SIZE) == out) {
            // Buffer is full, wait for consumer to consume
            printf("Buffer is full. Waiting for consumer...\n");
            sleep(1);
        }

        // Critical section (insert item into buffer)
        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;
    }
}

void consumer() {
    int item;
    for (int i = 0; i < BUFFER_SIZE; i++) {
        while (in == out) {
            // Buffer is empty, wait for producer to produce
            printf("Buffer is empty. Waiting for producer...\n");
            sleep(1);
        }

        // Critical section (remove item from buffer)
        item = buffer[out];
        out = (out + 1) % BUFFER_SIZE;

        // Process item
        printf("Consumer: Consumed item %d: %d\n", i+1, item);
    }
}

int main() {
    producer();
    consumer();

    return 0;
}

7.  WAP To Banker Algorithm

#include<stdio.h>
int main()
{
int k=0, output[10],d=0,t=0,ins[5],i,avail[5],allocated[10][5],need[10][5],MAX[10]
[5],pno,P[10],j,rz, count=0;
printf("\n Enter the number of resources : ");
scanf("%d", &rz);
printf("\n enter the max instances of each resources\n");
for (i=0;i<rz;i++)
{
avail[i]=0;
printf("%c= ",(i+97));
scanf("%d",&ins[i]);
}
printf("\n Enter the number of processes : ");
scanf("%d", &pno);
printf("\n Enter the allocation matrix \n ");
for (i=0;i<rz;i++)
printf(" %c",(i+97));
printf("\n");
for (i=0;i <pno;i++)
{
P[i]=i;
printf("P[%d] ",P[i]);
for (j=0;j<rz;j++)
{
scanf("%d",&allocated[i][j]);
avail[j]+=allocated[i][j];
}
}
printf("\nEnter the MAX matrix \n ");
for (i=0;i<rz;i++)
{
printf(" %c",(i+97));
avail[i]=ins[i]-avail[i];
}
printf("\n");
for (i=0;i <pno;i++)
{
printf("P[%d] ",i);
for (j=0;j<rz;j++)
scanf("%d", &MAX[i][j]);
}
printf("\n");
A: d=-1;
for (i=0;i <pno;i++)
{
count=0;
t=P[i];
for (j=0;j<rz;j++)
{
need[t][j] = MAX[t][j]-allocated[t][j];
if(need[t][j]<=avail[j])
count++;
}
if(count==rz)
{
output[k++]=P[i];
for (j=0;j<rz;j++)
avail[j]+=allocated[t][j];
}
else
P[++d]=P[i];
}
if(d!=-1)
{
pno=d+1;
goto A;
}
printf("\t <");
for (i=0;i<k;i++)
printf(" P[%d] ",output[i]);
printf(">");
return 0;
}

OUTPUT

Enter the number of resources : 3
enter the max instances of each resources
a= 10
b= 5
c= 7
Enter the number of processes : 5
Enter the allocation matrix
a b c
P[0] 0 1 0
P[1] 2 0 0
P[2] 3 0 2
P[3] 2 1 1
P[4] 0 0 2
Enter the MAX matrix
a b c
P[0] 7 5 3
P[1] 3 2 2
P[2] 9 0 2
P[3] 2 2 2
P[4] 4 3 3

8. WAP To first fit, Best fit, Worst fit

#include <stdio.h>
#include <stdbool.h>

#define MEMORY_SIZE 100

int memory[MEMORY_SIZE];

void initialize_memory() {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        memory[i] = -1; // -1 indicates that the memory block is free
    }
}

void display_memory() {
    printf("Memory Status:\n");
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i] == -1) {
            printf("- "); // Free memory block
        } else {
            printf("%d ", memory[i]); // Process ID occupying the memory block
        }
    }
    printf("\n");
}

void first_fit(int process_id, int size) {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i] == -1) {
            int j;
            for (j = i; j < i + size; j++) {
                if (memory[j] != -1) {
                    break; // Memory block not large enough for the process
                }
            }
            if (j == i + size) {
                // Allocate memory
                for (int k = i; k < i + size; k++) {
                    memory[k] = process_id;
                }
                printf("Process %d allocated memory from %d to %d (First Fit).\n", process_id, i, j - 1);
                return;
            }
        }
    }
    printf("Process %d cannot be allocated memory (First Fit).\n", process_id);
}

void best_fit(int process_id, int size) {
    int min_size = MEMORY_SIZE;
    int start_index = -1;

    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i] == -1) {
            int j;
            for (j = i; j < i + size; j++) {
                if (memory[j] != -1) {
                    break; // Memory block not large enough for the process
                }
            }
            if (j == i + size && j - i < min_size) {
                // Found a better fit
                min_size = j - i;
                start_index = i;
            }
        }
    }

    if (start_index != -1) {
        // Allocate memory
        for (int k = start_index; k < start_index + size; k++) {
            memory[k] = process_id;
        }
        printf("Process %d allocated memory from %d to %d (Best Fit).\n", process_id, start_index, start_index + min_size - 1);
    } else {
        printf("Process %d cannot be allocated memory (Best Fit).\n", process_id);
    }
}

void worst_fit(int process_id, int size) {
    int max_size = 0;
    int start_index = -1;

    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i] == -1) {
            int j;
            for (j = i; j < i + size; j++) {
                if (memory[j] != -1) {
                    break; // Memory block not large enough for the process
                }
            }
            if (j == i + size && j - i > max_size) {
                // Found a larger memory block
                max_size = j - i;
                start_index = i;
            }
        }
    }

    if (start_index != -1) {
        // Allocate memory
        for (int k = start_index; k < start_index + size; k++) {
            memory[k] = process_id;
        }
        printf("Process %d allocated memory from %d to %d (Worst Fit).\n", process_id, start_index, start_index + max_size - 1);
    } else {
        printf("Process %d cannot be allocated memory (Worst Fit).\n", process_id);
    }
}

int main() {
    int n, choice, process_id, size;

    initialize_memory();

    printf("Enter number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter process ID and size: ");
        scanf("%d %d", &process_id, &size);

        printf("Choose memory allocation algorithm (1: First Fit, 2: Best Fit, 3: Worst Fit): ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                first_fit(process_id, size);
                break;
            case 2:
                best_fit(process_id, size);
                break;
            case 3:
                worst_fit(process_id, size);
                break;
            default:
                printf("Invalid choice!\n");
                break;
        }

        display_memory();
    }

    return 0;
}


9. To implement FIFO Page replacement

#include <stdio.h>
#include <stdbool.h>

#define FRAME_SIZE 3 // Size of the page frame

void display(int frame[], int size) {
    for (int i = 0; i < size; i++) {
        if (frame[i] == -1) {
            printf("- ");
        } else {
            printf("%d ", frame[i]);
        }
    }
    printf("\n");
}

bool search(int frame[], int size, int page) {
    for (int i = 0; i < size; i++) {
        if (frame[i] == page) {
            return true; // Page found in frame
        }
    }
    return false; // Page not found in frame
}

void fifo(int pages[], int n, int frame_size) {
    int frame[frame_size]; // Page frame
    int pointer = 0; // Pointer to indicate the oldest page in the frame
    int page_faults = 0; // Counter for page faults

    // Initialize frame with empty slots (-1)
    for (int i = 0; i < frame_size; i++) {
        frame[i] = -1;
    }

    printf("Page Frame: ");
    display(frame, frame_size);

    // Iterate through pages
    for (int i = 0; i < n; i++) {
        printf("Accessing page %d...\n", pages[i]);
        if (!search(frame, frame_size, pages[i])) {
            // Page fault: page not found in frame
            page_faults++;
            frame[pointer] = pages[i]; // Replace the oldest page with the new page
            pointer = (pointer + 1) % frame_size; // Update pointer to point to the next oldest page
        }
        printf("Page Frame: ");
        display(frame, frame_size);
    }

    printf("Total page faults: %d\n", page_faults);
}

int main() {
    int n; // Number of pages
    printf("Enter the number of pages: ");
    scanf("%d", &n);

    int pages[n]; // Array to store the pages

    printf("Enter the reference string of pages:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    fifo(pages, n, FRAME_SIZE);

    return 0;
}

10. Disk Scheduling Scan

#include <stdio.h>
#include <stdlib.h>

void sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void scan(int requests[], int n, int head, char direction) {
    sort(requests, n); // Sort the requests array

    int total_movement = 0; // Total head movement
    int cur_pos = head; // Current position of the head
    int i, start_index, end_index;

    // Find the start and end index of requests on the left and right side of the head
    for (i = 0; i < n; i++) {
        if (requests[i] >= head) {
            start_index = i;
            break;
        }
    }

    for (i = start_index; i < n; i++) {
        if (requests[i] > head) {
            end_index = i - 1;
            break;
        }
    }
    if (i == n) {
        end_index = n - 1;
    }

    // Scan towards right
    if (direction == 'r') {
        printf("Head movement sequence: %d ", cur_pos);
        for (i = start_index; i <= end_index; i++) {
            total_movement += abs(cur_pos - requests[i]);
            cur_pos = requests[i];
            printf("-> %d ", cur_pos);
        }

        // Go to the end of the disk
        total_movement += abs(cur_pos - 199);
        cur_pos = 199;
        printf("-> %d ", cur_pos);

        // Scan towards left
        printf("-> 0 ");
        total_movement += cur_pos;

        // Go back to the starting position
        total_movement += 0;
        printf("-> %d\n", 0);
    }
    // Scan towards left
    else {
        printf("Head movement sequence: %d ", cur_pos);
        for (i = end_index; i >= start_index; i--) {
            total_movement += abs(cur_pos - requests[i]);
            cur_pos = requests[i];
            printf("-> %d ", cur_pos);
        }

        // Go to the beginning of the disk
        total_movement += abs(cur_pos - 0);
        cur_pos = 0;
        printf("-> %d ", cur_pos);

        // Scan towards right
        printf("-> 199 ");
        total_movement += (199 - cur_pos);

        // Go back to the starting position
        total_movement += 199;
        printf("-> %d\n", 199);
    }

    printf("Total head movement: %d\n", total_movement);
}

int main() {
    int n, head;
    char direction;
    
    printf("Enter the number of disk requests: ");
    scanf("%d", &n);
    
    int requests[n];
    
    printf("Enter the disk requests: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the initial position of the head: ");
    scanf("%d", &head);

    printf("Enter the direction of head movement (l for left, r for right): ");
    scanf(" %c", &direction);
    
    scan(requests, n, head, direction);

    return 0;
}
